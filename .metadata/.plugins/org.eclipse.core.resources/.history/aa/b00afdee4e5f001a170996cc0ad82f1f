/*
 * des.h
 *
 *  Created on: Sep 28, 2019
 *      Author: hurdleg
 *  Modified on: Mar 5, 2020
 *  	Modified by: Connor Davidson and Sydney Hass
 */

#ifndef DOOR_ENTRY_SYSTEM_H_
#define DOOR_ENTRY_SYSTEM_H_

#define NUM_STATES 7	// where n = number of states in your finite state machine (FSM)
typedef enum {
	//TODO :: to see the list of //TODOS, Window > Show View > Tasks
	//TODO :: assign an enum value, one for each state
} State;

#define NUM_INPUTS 12	// where n equals the number of input commands that drive the FSM.
			// From the assignment specification, notice the prompt. Each command, ls, rs, etc.
			// Count those...
typedef enum {
	ls = 0,
	rs = 1,
	ws = 2,
	gru = 3,
	glu = 4,
	lo = 5,
	ro = 6,
	lc = 7,
	rc = 8,
	grl = 9,
	gll = 10,
	exit = 11
} Input;

const char *inMessage[NUM_INPUTS] = {
	"ls",
	"rs",
	"ws",
	"gru",
	"glu",
	"lo",
	"ro",
	"lc",
	"rc",
	"grl",
	"gll",
	"exit"
};

#define NUM_OUTPUTS n	// where n equals the number of outputs messages from the FSM.
typedef enum {
	GLU_MSG = 0,
	GRU_MSG =1,
	LO_MSG = 2,
	RO_MSG = 3,
	LC_MSG = 4,
	RC_MSG = 5,
	GLL_MSG = 6,
	GRL_MSG = 7
} Output;

const char *outMessage[NUM_OUTPUTS] = {
	"Left door unlocked by Guard",
	"Right door unlocked by Guard",
	"Person opened left door",
	"Person opened right door",
	"Left door closed (automatically)",
	"Right door closed (automatically)",
	"Left door locked by Guard",
	"Right door locked by Guard"
};

// inputs client sends a Person struct to its server, the controller
typedef struct {
	int personID;
	int weight;
	typedef enum {
		INBOUND = 0,
		OUTBOUND = 1
	} direction;
	State state;
} Person;

// controller client sends a Display struct to its server, the display
typedef struct {
	int outMessage;
	Person person;
} Display;

#endif /* DOOR_ENTRY_SYSTEM_H_ */
