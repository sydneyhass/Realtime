/*
 * des.h
 *
 *  Created on: Sep 28, 2019
 *      Author: hurdleg
 *  Modified on: Mar 5, 2020
 *  	Modified by: Connor Davidson and Sydney Hass
 */

#ifndef DOOR_ENTRY_SYSTEM_H_
#define DOOR_ENTRY_SYSTEM_H_

#define NUM_STATES 7	// where n = number of states in your finite state machine (FSM)
typedef enum {
	//TODO :: to see the list of //TODOS, Window > Show View > Tasks
	//TODO :: assign an enum value, one for each state
} State;

#define NUM_INPUTS 12	// where n equals the number of input commands that drive the FSM.
			// From the assignment specification, notice the prompt. Each command, ls, rs, etc.
			// Count those...
typedef enum {
	ls = 0,
	rs = 1,
	ws = 2,
	gru = 3,
	glu = 4,
	lo = 5,
	ro = 6,
	lc = 7,
	rc = 8,
	grl = 9,
	gll = 10,
	exit = 11
} Input;

const char *inMessage[NUM_INPUTS] = {
	"ls",
	"rs",
	"ws",
	"gru",
	"glu",
	"lo",
	"ro",
	"lc",
	"rc",
	"grl",
	"gll",
	"exit"
};

#define NUM_OUTPUTS n	// where n equals the number of outputa messages from the FSM.
typedef enum {
	//TODO :: assign an enum value, one for each output message from the FSM
} Output;

const char *outMessage[NUM_OUTPUTS] = {
	//TODO :: each output message. For example, "Person opened left door"
};

// inputs client sends a Person struct to its server, the controller

typedef struct {
	int personID;
	int weight;
	typedef enum {
		INBOUND = 0,
		OUTBOUND = 1
	} direction;
	State state;
} Person;

// controller client sends a Display struct to its server, the display
typedef struct {
	//TODO :: fields for the output message and the Person. For the output message, I used an int, which
	//	is the index into the outMessages array. That way I don't pass strings in my messages.
	//	The Person field is needed, as some output message require information from the Person.
	//	Specifically, those messages that display the Person's ID and weight.
} Display;

#endif /* DOOR_ENTRY_SYSTEM_H_ */
