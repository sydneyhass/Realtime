#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "des-mva.h"

void displayMenu();

int main(void) {
	int coid;
	char userInput[4];
	char personID[32];
	char weight[32];
	pid_t serverpid;

	// TODO: Replace with number of required arguments
	if(argc != 5) {
		fprintf(stderr, "Wrong number of arguments\n");
		exit(EXIT_FAILURE);
	}

	serverpid = atoi(argv[1]);
	if((coid = ConnectAttach(ND_LOCAL_NODE, serverpid, 1, _NTO_SIDE_CHANNEL, 0)) == -1) {
		fprintf (stderr, "ConnectAttach error\n");
		perror (NULL);
		exit(EXIT_FAILURE);
	}

	while(1) {
		displayMenu();
		scanf("%s", userInput);
		if (strcmp(userInput, "ls") == 0 || strcmp(userInput, "rs") == 0) {
			printf("Enter your ID: ");
			scanf("%s", personID);
		}
		if(strcmp(userInput, "ws") == 0) {
			printf("Enter your weight: ");
			scanf("%s", weight);
		}
		if(strcmp(userInput, "exit") == 0) {
			break;
		}
	}
	return EXIT_SUCCESS;
}

void displayMenu() {
	printf("\nEnter the event type:\n");
	printf("\t%s\n", "ls  - left scan");
	printf("\t%s\n", "rs  - right scan");
	printf("\t%s\n", "ws  - weight scale");
	printf("\t%s\n", "lo  - left open");
	printf("\t%s\n", "ro  - right open");
	printf("\t%s\n", "lc  - left close");
	printf("\t%s\n", "rc  - right close");
	printf("\t%s\n", "gru - guard right unlock");
	printf("\t%s\n", "glu - guard left unlock");
	printf("\t%s\n", "grl - guard right lock");
	printf("\t%s\n", "gll - guard left lock");
	printf("\t%s\n", "exit  - quit the program");
}

//client_send_t sMsg;
//	server_response_t rMsg;
//
//
//	if(argc != 5) {
//		fprintf(stderr, "Wrong number of arguments\n");
//		exit(EXIT_FAILURE);
//	}
//
//	pid_t serverpid = atoi(argv[1]);
//
//	sMsg.left_hand = atoi(argv[2]);
//	sMsg.operator = argv[3][0];
//	sMsg.right_hand = atoi(argv[4]);
//
//	if((coid = ConnectAttach(ND_LOCAL_NODE, serverpid, 1, _NTO_SIDE_CHANNEL, 0)) == -1) {
//		fprintf (stderr, "Couldn't ConnectAttach\n");
//		perror (NULL);
//		exit(EXIT_FAILURE);
//	}
//
//	if(MsgSend(coid, &sMsg, sizeof(sMsg) + 1, &rMsg, sizeof(server_response_t)) == -1L) {
//		fprintf (stderr, "MsgSend had an error\n");
//		exit (EXIT_FAILURE);
//	}
//
//	switch(rMsg.error) {
//	case SRVR_OK:
//		fprintf(stdout, "The server has calculated the result of %d %c %d as %.2f\n", sMsg.left_hand, sMsg.operator, sMsg.right_hand, rMsg.answer);
//		break;
//	case SRVR_UNDEFINED:
//		fprintf(stdout, rMsg.errorMsg);
//		break;
//	case SRVR_INVALID_OPERATOR:
//		fprintf(stdout, rMsg.errorMsg);
//		break;
//	case SRVR_OVERFLOW:
//		fprintf(stdout, rMsg.errorMsg);
//		break;
//	}
//
//	ConnectDetach(coid);
//	return EXIT_SUCCESS;
